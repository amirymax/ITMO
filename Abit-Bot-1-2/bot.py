from aiogram import types, executor, Dispatcher, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot_functions.Person import Student
from bot_functions.ask_question import new_question
from TOKEN import TOKEN

bot = Bot(token=TOKEN)  # @itmo_abit_help_bot
dp = Dispatcher(bot)
user = Student()


def get_from_call(call):
    return call.data.split()[1]


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user.area_markup_status = True
    user.subjects_markup_status = True

    markup = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('–í—ã–±–æ—Ä –º–µ–≥–∞—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', callback_data='area')
    but2 = InlineKeyboardButton('–¢–µ—Å—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º', callback_data='subjects')
    markup.insert(but1)
    markup.insert(but2)
    user.action_markup = markup

    user.name = message.chat.first_name
    await bot.send_message(message.chat.id,
                           f'–ü—Ä–∏–≤–µ—Ç, {user.name}\n–ï—Å–ª–∏ –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–µ—Ç—Å—è —Å–ª–æ–∂–Ω—ã–º, —Ç–æ –Ω–µ '
                           f'—Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è! –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —à–∫–æ–ª—å–Ω—ã—Ö '
                           f'–ø—Ä–µ–¥–º–µ—Ç–∞—Ö, –∞ —Ç–∞–∫ –∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –° —á–µ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ '
                           f'–Ω–∞—á–∞—Ç—å?',
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'area')
async def area(call: types.callback_query):
    # user.subjects_markup_status=False
    user.choose_area = True
    megas = {
        '–ö–¢–£': 'mega1',
        '–§–¢–ú–§': 'mega2',
        '–¢–ò–ù–¢': 'mega3',
        '–§–¢–ú–ò': 'mega4',
        '–ë–∏–æ–¢–µ—Ö': 'mega5'
    }
    markup = InlineKeyboardMarkup(resize_keyboard=True)

    for i, j in megas.items():
        markup.insert(InlineKeyboardButton(i, callback_data='area ' + j))
    user.area_markup = markup
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–≥–∞—Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=markup)


subjects = {
    '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'english',
    '–ë–∏–æ–ª–æ–≥–∏—è': 'biology',
    '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 'geography',
    '–ò–ö–¢': 'ict',
    '–ò—Å—Ç–æ—Ä–∏—è': 'history',
    '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'literature',
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'math',
    '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'social_science',
    '–†—É—Å—Å–∫–∏–π': 'russian',
    '–§–∏–∑–∏–∫–∞': 'physics',
    '–•–∏–º–∏—è': 'chemistry'
}


@dp.callback_query_handler(lambda c: c.data == 'subjects')
async def subject(call: types.callback_query):
    # user.subjects_markup_status = True
    user.choose_subject = True
    # if user.subjects_markup_status:

    markup = InlineKeyboardMarkup(resize_keyboard=True)

    for i, j in subjects.items():
        markup.insert(InlineKeyboardButton(i, callback_data='subject ' + j))
    user.subject_markup = markup
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', reply_markup=markup)


@dp.callback_query_handler(text_contains='area')
async def area_choose_subject(call: types.callback_query):
    user.testing_area = True
    if user.choose_area:
        subjects_names = []
        user.choose_area = False
        user.area = get_from_call(call)
        user.detect_subjects()
        print(user.subjects_of_area)
        for i in user.subjects_of_area:
            subjects_names.append('**' + list(subjects.keys())[list(subjects.values()).index(i)] + '**')
        subjects_joined = ', '.join(i for i in subjects_names)
        user.joined_subjects = subjects_joined
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue'))
        user.subject = user.subjects_of_area[user.subjects_of_area_index]
        # question, variants = new_question(user)
        await bot.send_message(call.message.chat.id, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n' + subjects_joined,
                               reply_markup=markup,
                               parse_mode='markdown')
        # user.question_number += 1


@dp.callback_query_handler(text_contains='subject')
async def subject_testing(call: types.callback_query):
    if user.choose_subject:
        user.choose_subject = False
        user.subject = get_from_call(call)

        question, variants = new_question(user)
        await bot.send_message(call.message.chat.id, f'{user.question_number}. ' + question, reply_markup=variants)
        user.question_number += 1


@dp.callback_query_handler(text_contains='continue')
async def continuee(call: types.callback_query):
    print(user.subjects_of_area)
    if len(user.subjects_of_area):
        await bot.send_message(call.message.chat.id,
                               '–¢–µ—Å—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: ' + '**' + list(subjects.keys())[list(subjects.values()).index(
                                   user.subjects_of_area[0])] + '**',
                               parse_mode='markdown')

        user.choose_subject = False
        print(user.subject)

        question, variants = new_question(user)
        await bot.send_message(call.message.chat.id, question, reply_markup=variants)
        user.question_number += 1

        user.subjects_of_area.remove(user.subjects_of_area[0])


@dp.callback_query_handler(text_contains='variant')
async def testing(call: types.callback_query):
    answer = get_from_call(call)

    if user.test[answer] == user.correct_answer:
        user.correct_answers += 1

    edited_message = call.message.text + '\n'
    variant_letter_index = 0
    variant_letters = 'abcd'
    for i in user.test.values():
        edited_message += variant_letters[variant_letter_index] + '. ' + i
        if i == user.correct_answer:
            edited_message += '‚úÖ'
        elif i == user.test[answer]:
            edited_message += '‚ùå'
        edited_message += '\n'
        variant_letter_index += 1
    edited_message = edited_message.strip()
    await call.message.edit_text(edited_message)
    try:
        question, variants = new_question(user)
        # if user.question_number==10:print(question)
        await bot.send_message(call.message.chat.id, f'{user.question_number}. ' + question, reply_markup=variants)
        user.question_number += 1
    except TypeError:
        if user.testing_area:
            user.all_points += user.correct_answers
            if len(user.subjects_of_area):
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue'))
                user.choose_subject = True
                this_subject = user.subject
                user.subject = user.subjects_of_area[0]
                await bot.send_message(call.message.chat.id,
                                       f'–¢–µ—Å—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É **{this_subject}** –æ–∫–æ–Ω—á–µ–Ω.'
                                       f'–í—ã –Ω–∞–±—Ä–∞–ª–∏ **{user.correct_answers} –±–∞–ª–ª–æ–≤**.'
                                       f' –í —Å—É–º–º–µ —É –≤–∞—Å **{user.all_points} –±–∞–ª–ª–æ–≤**. *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*',
                                       reply_markup=markup, parse_mode='markdown')
                user.question_number = 1
                user.correct_answers = 0
                user.passed_questions = []
            else:
                await bot.send_message(call.message.chat.id,
                                       f'–í—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º **{user.joined_subjects}** '
                                       f'–∏ –Ω–∞–±—Ä–∞–ª–∏ **{user.all_points} –±–∞–ª–ª–æ–≤**, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç '
                                       f'**{user.all_points * 100 / 40}%**. *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
                                       parse_mode='markdown', reply_markup=user.action_markup)

                user.__init__(user.name)
        else:
            await bot.send_message(call.message.chat.id,
                                   f'–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω.\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç—å {user.correct_answers * 10}%. '
                                   f'({user.correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤) '
                                   f'\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?',
                                   reply_markup=user.action_markup)

            user.__init__(user.name)


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    await bot.send_message(message.chat.id, "Yooo Dude! –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —ç—Ç–æ —Ç–µ–±–µ –Ω–µ —á–∞—Ç–±–æ—Çüò°üò°üò°")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
